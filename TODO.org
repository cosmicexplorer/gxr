#+TITLE: TODO

* roadmap
  :PROPERTIES:
  :ORDERED:  t
  :COOKIE_DATA: todo recursive
  :END:
** TODO basic output for c : mvp [3/5]
   DEADLINE: <2015-06-03 Wed>
   - [X] basic backend([[backend]])
   - [ ] basic frontend ([[frontend]]) [0/3]
     - [ ] html per page
     - [ ] html per entity [0/2]
       - [ ] presentation for type
       - [ ] presentation for value
     - [ ] html glossary
   - [X] types and variables [4/4]
     - [X] make it work completely
     - [X] see [[index contents v1]].
     - [X] if a function is called, don't also call it a reference; pick one (probably just stick with ref tbh)
       - disagree, see [[call vs reference]] below
     - [X] add ref_scope field
   - [X] multiple files [2/2]
     - [X] dumps to csv
     - [X] unclear how to show static linkage through "scope" paradigm
       - no it's not lol
   - [ ] preprocessor macros [0/2]
     - [ ] be able to read the final actual text
     - [ ] implement temp file with macro refs and skipped lines
       - do this by manually parsing preprocessing directives (lol lol lol) and:
         1. putting the body of #define directives on the next line
         2. removing #if/#ifndef/etc completely
       - this *will* cause compilation failure (esp due to one definition rule for conditional compilation, as well as parsing macros without giving arguments), so we'll have to forgo the ability to *know* whether the program will compile correctly already. however, this is not too much of an issue.
         - need to know whether, given compilation failure, the ast will still be parsed. maybe? let's try it.
       - [ ] be able to read the references to other functions and whatnot contained within a preprocessor expansion
       - [ ] conditional compilation support
         - clang_getSkippedRanges makes this somewhat easy
*** backend
simply take all cursors of importance (the ones whose types are mentioned in [[index contents v1]]) and stick them in a csv file. no change for multiple files.
*** frontend
collate all csv files from frontend and produce html documentation

DON'T do tooling yet; just use simple test cases. we will refactor the tooling in [[tooling]].
** TODO adding c++ : testing plasticity, and adding objects [0/4]
This depends upon [[index contents v2]].
   - [ ] add struct/class member decls/refs
     - treat each one like its own variable maybe?
   - [ ] determine if clang_getCursorReferenced() returns a "declaration" that's necessarily in the correct scope
     - in the case of declaring a class's static member as "class::member name;", we don't know if that's what will show up (and of course, the semantic parent of that definition is the enclosing namespace, not class::)
   - [ ] add aliases [0/2]
     - [ ] typedefs
     - [ ] pointer/refs
       - super cool!
   - [ ] labels and gotos
** TODO make integration and related [[tooling]] [0/3]
   - [ ] remove requirement to include clang headers
   - [ ] integrate with make so that output is produced only upon change
   - [ ] target specifiers [[target specifiers]]
*** target specifiers
essentially specify different units to be compiled together into single binary file (the point of this is that all entities used are specified no more than once (sometimes less than once for entities loaded from a shared library, but that's not too worrisome)). a binary file can be a static library, dynamic library, or executable. obviously, the analogy is more difficult for interpreted languages, but can still be viewed similarly.

there may be room for a separate tool, if required, which calculates dependencies of modules from dynamic languages on each other. this might require not just parsing the input, but also maintaining in memory some part of the runtime, so that we know where to refer python's system.stderr to, for example
** icing on the cake [0/2]
   - [ ] integrate with doxygen/cldoc
   - [ ] org-mode
** expansion
essentially, add other languages, hoping that the abstractions used before are generic enough
   - [ ] python
   - [ ] ruby
   - [ ] java
   - [ ] lisp
   - etc

* indexing
use other database to store results from files, then read from db. this allows for multiple-file support simply by joining the databases!

** index contents v1 [0/10]
   - [ ] file
   - [ ] offset
   - [ ] line
   - [ ] col
   - [ ] whether is decl/ref/defn/call
   - [ ] whether is var/func/type
   - [ ] if is var/func, then type
   - [ ] language
   - [ ] name
   - [ ] semantic scope

*** notes
defn is always decl, unless we count assignment as a definition (which i like; however, that makes things more murky). call is ref; these distinctions can be worked out by the backend that queries the db.

type of a type can be "simple" (typedef of primitive), or a class/struct. labels and scopes would not use the "type" column.

anonymous entities are actually somewhat annoying to resolve.

** index contents v2 [0/6]
   - [ ] anonymous types/structs/classes/namespaces
   - [ ] add scope/label to
   - [ ] linkage (extern/static/normal)
   - [ ] #if scope
   - [ ] namespace entities
   - [ ] structs/classes
   - [ ] aliases

*** notes
c++ implicitly treats const namespace-scope variables as having internal (static) linkage, unlike c. this shouldn't be a problem for libclang, though.

* general notes / design decisions
** declaration vs definition
i don't like the somewhat arbitrary demarcation between declaration and definition, especially because the concept of a mere "declaration" doesn't even exist in dynamic languages, and because a definition is, of course, also a declaration. the frontend can deal with that however it likes to, which works out just fine, i guess. it's just annoying.
** frontend vs backend
unlike most applications, the "backend" runs before the "frontend;" i'm denoting the backend to mean the part that actually parses the language and spits out csv, and the frontend the part that produces some usable output (html, org, etc). not a problem, i just had the two mixed up at first.
** call vs reference
we note that in c/c++, a reference (declrefexpr) occurs whenever a call occurs, at the exact same place. we're just going to log both for now and let the frontend deal with it.
** on what the "scope" of a cursor
the "scope" field will always refer to the scope of the actual cursor that is referenced (for example, if the line 'std::cout << "hello"' appears in main(), the scope of the reference to std::cout will be ::main@). a new field "ref_scope" is blank if the cursor isn't a reference or call to something, but contains the scope of the cursor that it refers to (in the given case, ::std::).
